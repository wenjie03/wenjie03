{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/avatar.jpg","path":"avatar.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"16fb8cbbe3bf5473427dc62ccbf2dc98c84b58a8","modified":1518058885277},{"_id":"source/CNAME","hash":"b981b033c8a2de228db8a6318e380d356930e604","modified":1518060886628},{"_id":"themes/yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1518058885339},{"_id":"themes/yelee/README.md","hash":"20eaa585f0228342d90cc791b21b6ab5031ff4dd","modified":1518058885340},{"_id":"themes/yelee/_config.yml","hash":"420e9d439140b288d49d7df903fe7948951e40ae","modified":1518058885340},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1518058885362},{"_id":"source/_posts/123423.md","hash":"63ca66039ae99c944bc494f7873f25532e85407c","modified":1518067424537},{"_id":"source/_posts/javascript闭包.md","hash":"be96a26f446305d6c18139e5a4ad8087edcce4e0","modified":1518058885278},{"_id":"source/_posts/js判断单击软键盘的“完成”按钮.md","hash":"8400524c32a2d4758bf72b5fefe8a07e8977dc70","modified":1518058885279},{"_id":"source/_posts/markdown 格式输出.md","hash":"be41d3c5f71a297989353c4b657893df47a7133c","modified":1518058885279},{"_id":"source/_posts/只有一行文字时两端对齐.md","hash":"e1137214215ea88c50a45fdac8c9ea3a7a40bb8c","modified":1518058885280},{"_id":"source/_posts/我在 web 领域工作越长时间.md","hash":"657940b5d3e8c5575870343289678f5df61a008e","modified":1518058885281},{"_id":"source/about/index.md","hash":"26146f95458f1b9e1bba37c0effe31b700141af5","modified":1518058885282},{"_id":"source/_posts/博客成立过程.md","hash":"a0ef0e34b47068b7146fe10c92b7c4489aef0aef","modified":1518058885280},{"_id":"source/tags/index.md","hash":"800486ef29a3c1ccc21e66633156e708c80fc45c","modified":1518058885282},{"_id":"themes/yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1518058885342},{"_id":"themes/yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1518058885342},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1518058885343},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1518058885343},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1518058885344},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1518058885359},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1518058885360},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1518058885360},{"_id":"themes/yelee/layout/layout.ejs","hash":"913ccba7f7faf301047b164f4b2f2ac39695bf51","modified":1518058885360},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1518058885361},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1518058885361},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1518058885363},{"_id":"themes/yelee/source/avatar.jpg","hash":"2881cd4c037a4ff5e43dc07769da1784d3d6900a","modified":1518058885364},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1518058885362},{"_id":"themes/yelee/source/favicon.png","hash":"3b28437d967ceb18a450176dbd0c76f3b2269bcc","modified":1518058885392},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"6fdffcecd81f6e544fdb63aa1f01b11c41799271","modified":1518058885345},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1518058885345},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1518058885346},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"29749e14db1a5f1ab5e82f486ac0c7f8417c86c0","modified":1518058885346},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1518058885347},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"c5a5cda51cb8d1eaab0fb4ce6a5fb364f1044847","modified":1518058885349},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1518058885350},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"784096c088c3779a6191f6e811c11abc762c03fb","modified":1518058885350},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1518058885351},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"68b9975799c873222450e772cc696c1e7801fa3b","modified":1518058885352},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"a549b672232e25f5a0c8e628b7c10adf5b5ffcef","modified":1518058885352},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1518058885353},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1518058885354},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1518058885354},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1518058885354},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"bfc245d99cca8e325f7c34b985a769ff780f28a6","modified":1518058885358},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1518058885358},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"5ff80e66e6911a6f62a9e53b74556a14d09c4cef","modified":1518058885359},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1518058885365},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1518058885367},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1518058885367},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1518058885368},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1518058885369},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1518058885370},{"_id":"themes/yelee/source/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1518058885371},{"_id":"themes/yelee/source/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1518058885372},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1518058885374},{"_id":"themes/yelee/source/css/_variables.styl","hash":"512a9d250439016138094b26d229e3dd4751be5c","modified":1518058885391},{"_id":"themes/yelee/source/css/style.styl","hash":"8cefcb07f2f23bdf5daea6db07b8f59ed0fd9374","modified":1518058885392},{"_id":"themes/yelee/source/img/CSDN.png","hash":"aad4bd4b0dfd63f81849a7447a69cc93fcf2d430","modified":1518058885393},{"_id":"themes/yelee/source/img/Plunker.png","hash":"0866ed3cd6281d4f948d154c527b39bf2cdade1b","modified":1518058885394},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"6129d1e73e1c9e36c18ab887d04a1461f1af9635","modified":1518058885394},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"6c181145a7033847df3663e10c136590dbab2ba6","modified":1518058885394},{"_id":"themes/yelee/source/img/V2EX.png","hash":"f0caf915a5ce1a5fb96d7ed7bd2aad9ce0d3e243","modified":1518058885395},{"_id":"themes/yelee/source/img/avatar.jpg","hash":"2881cd4c037a4ff5e43dc07769da1784d3d6900a","modified":1518058885395},{"_id":"themes/yelee/source/img/avatar.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1518058885396},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1518058885396},{"_id":"themes/yelee/source/img/博客园.png","hash":"8bd54005ce0fee7a5ee70e0cce5369a93ef8316c","modified":1518058885397},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"40b9099a802ee7ca40f58ab013e5faad5b3f8ed5","modified":1518058885397},{"_id":"themes/yelee/source/img/知乎.png","hash":"2da06acf9e8026d9ac0a719844a6fae142271c14","modified":1518058885398},{"_id":"themes/yelee/source/img/简书.png","hash":"a1b837849522cc2956317e511b076831bb7acd8c","modified":1518058885399},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"9620f5025d6e2614d82ace771ddfe708362220c4","modified":1518058885399},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"8e3065d8ea3a3d07b23d4cfc10ceb626c67a926a","modified":1518058885400},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"caa6021d0c35f11744f03d23a2c12f7734041562","modified":1518058885400},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1518058885401},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1518058885401},{"_id":"themes/yelee/source/js/main.js","hash":"83d88621380d39675a905190e19c5d45a463205d","modified":1518058885402},{"_id":"themes/yelee/source/js/mobile.js","hash":"44430fad0dedf1e50284bebdaf88c9b87a75646d","modified":1518058885402},{"_id":"themes/yelee/source/js/pc.js","hash":"1e8baf58df1741caf41d9bcb0c520ff8c88d74de","modified":1518058885403},{"_id":"themes/yelee/source/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1518058885366},{"_id":"themes/yelee/source/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1518058885373},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1518058885348},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"1f9ac8182fe0b867a8f1988888336c40c25894cd","modified":1518058885348},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"142e1bb357d738663655ddab25f75e85e20345e4","modified":1518058885349},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1518058885355},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1518058885356},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1518058885356},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1518058885357},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1518058885357},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1518058885358},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"27ccc6374d04cd93717a2b6c587342b6cbe6fc80","modified":1518058885375},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"a14120bbce2c384d8df1662e18fa47f75f519a18","modified":1518058885375},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"e920a40d228b844f8636ae3c1c202850e779e38d","modified":1518058885380},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1518058885380},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"19b7eba61553060fda25999b2a61d0e7b5e072a3","modified":1518058885381},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1518058885382},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"5453b26b653c6f9893827ac12319db9cba4b35c9","modified":1518058885383},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"bed93ab1487da7591883e0df5eefa4cd413434ed","modified":1518058885384},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"ae594540c6685b490c6ced196f75cb5e3ca7dae0","modified":1518058885385},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1518058885386},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1518058885387},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1518058885388},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1518058885389},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1518058885389},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1518058885390},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1518058885391},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"4c71df7426fa7325218929465111aa5b2ec5bd8c","modified":1518058885376},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1518058885377},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"266967786039fa0aa148a2adec624d468e3bd3b5","modified":1518058885377},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1518058885377},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"aedbcd697c9fbaeeb93c068be3db771c41feba0d","modified":1518058885378},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1518058885379},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"f686fd5d6e41f749ad860971fbda5a108fbf32f5","modified":1518058885379},{"_id":"themes/yelee/source/css/_partial/post/youyan.styl","hash":"9076b0d3c231e16b8a1d7f834e62a98d843edd32","modified":1518058885387},{"_id":"public/baidusitemap.xml","hash":"eec9edd9ea2b849d87c228f2316d7e1863a51945","modified":1518070441568},{"_id":"public/404.html","hash":"7bb6488b6ccaf86fd8f39e289af116274a706499","modified":1518070441699},{"_id":"public/about/index.html","hash":"3702860fbe8aeb39f11b05e2e29e57d0784ed67c","modified":1518070441700},{"_id":"public/archives/2018/index.html","hash":"2d213a8769ef2046c3856d17d792ef2eda33ca73","modified":1518070441700},{"_id":"public/archives/2018/02/index.html","hash":"86d105dd2e16755fb4e2986b7843077bd2abb6cb","modified":1518070441700},{"_id":"public/categories/其它/index.html","hash":"abd242be034a60f86d4444272491f6679b31a08a","modified":1518070441700},{"_id":"public/categories/个人感悟/index.html","hash":"09bedb43108a11a274d0e1d7ac6b1bd9b4ee48a4","modified":1518070441700},{"_id":"public/tags/javascript/index.html","hash":"09faceb5598dacfede9402fb8f1ce8a17622ed66","modified":1518070441700},{"_id":"public/tags/《你不知道的JavaScript》/index.html","hash":"2e857d6df705fa2d97e9f1c35be30e1c38fb4901","modified":1518070441700},{"_id":"public/tags/web/index.html","hash":"c4ce3f056c4cd44d2d106dfc451dcd63ef0355c9","modified":1518070441700},{"_id":"public/tags/javaScript/index.html","hash":"e07402982e7a5067664d8ca1c872f164b71c42a9","modified":1518070441700},{"_id":"public/tags/杂文/index.html","hash":"bf8846ab5f41c078e674374fcee6223df32e8648","modified":1518070441700},{"_id":"public/tags/css/index.html","hash":"094f3b86cb77960d67aee59518833b5216ab7a0e","modified":1518070441701},{"_id":"public/tags/hexo/index.html","hash":"02f4c75dfcbfa716dee00a08db28d8703c1b3856","modified":1518070441701},{"_id":"public/tags/git/index.html","hash":"3bf06962a41b39149b984e8ed848208a6562e20b","modified":1518070441701},{"_id":"public/tags/index.html","hash":"4146dff0ee01d544429a7d85dbfa166fe635ccd2","modified":1518070441701},{"_id":"public/2018/02/08/123423/index.html","hash":"e0df8189597d8eded5b1134d6a804d3a8694ba2d","modified":1518070441701},{"_id":"public/2016/05/22/javascript闭包/index.html","hash":"53bcf2762f7ba5cf3919c094ca01ff14b764df9c","modified":1518070441701},{"_id":"public/2016/05/22/博客成立过程/index.html","hash":"d16f2c7baef6a6291dc35c13d3d20c0305b814b4","modified":1518070441701},{"_id":"public/2016/05/19/js判断单击软键盘的“完成”按钮/index.html","hash":"05ae8ff89a54377477596ce70d1945dbb132255b","modified":1518070441701},{"_id":"public/2016/05/19/我在 web 领域工作越长时间/index.html","hash":"c7accaa931def9a522e970036b922f8867d5a395","modified":1518070441701},{"_id":"public/2016/05/19/只有一行文字时两端对齐/index.html","hash":"5cc8a87b18ddb5446be2cb8c6107db5e32f14254","modified":1518070441701},{"_id":"public/2016/05/18/markdown 格式输出/index.html","hash":"fce45b3720b7078ec36ed03a7b27722d36a63df0","modified":1518070441701},{"_id":"public/archives/index.html","hash":"041de69293b4411dc85e6018a9f0878fe9d7d17b","modified":1518070441702},{"_id":"public/archives/2016/index.html","hash":"a8929b88214d5474959f9e49c7d89f7a4507c22b","modified":1518070441702},{"_id":"public/archives/2016/05/index.html","hash":"b91db42a1d6a9d409e3705022cada1ca816ba899","modified":1518070441702},{"_id":"public/categories/术业专攻/index.html","hash":"242dcdcfd07e2a5cb26f1496c7e1598338c6fed4","modified":1518070441702},{"_id":"public/index.html","hash":"789725adaf22dcd8357af0ba025136643c004de4","modified":1518070441702},{"_id":"public/tags/感悟/index.html","hash":"5a83086bfa0cf25133e18280fe2b485250d13b9b","modified":1518070441702},{"_id":"public/CNAME","hash":"b981b033c8a2de228db8a6318e380d356930e604","modified":1518070441739},{"_id":"public/avatar.jpg","hash":"2881cd4c037a4ff5e43dc07769da1784d3d6900a","modified":1518070441739},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1518070441740},{"_id":"public/favicon.png","hash":"3b28437d967ceb18a450176dbd0c76f3b2269bcc","modified":1518070441740},{"_id":"public/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1518070441740},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1518070441740},{"_id":"public/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1518070441740},{"_id":"public/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1518070441740},{"_id":"public/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1518070441740},{"_id":"public/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1518070441740},{"_id":"public/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1518070441741},{"_id":"public/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1518070441741},{"_id":"public/img/CSDN.png","hash":"aad4bd4b0dfd63f81849a7447a69cc93fcf2d430","modified":1518070441741},{"_id":"public/img/Plunker.png","hash":"0866ed3cd6281d4f948d154c527b39bf2cdade1b","modified":1518070441741},{"_id":"public/img/SegmentFault.png","hash":"6129d1e73e1c9e36c18ab887d04a1461f1af9635","modified":1518070441741},{"_id":"public/img/TiddlyWiki.png","hash":"6c181145a7033847df3663e10c136590dbab2ba6","modified":1518070441741},{"_id":"public/img/V2EX.png","hash":"f0caf915a5ce1a5fb96d7ed7bd2aad9ce0d3e243","modified":1518070441741},{"_id":"public/img/avatar.jpg","hash":"2881cd4c037a4ff5e43dc07769da1784d3d6900a","modified":1518070441741},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1518070441742},{"_id":"public/img/avatar.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1518070441742},{"_id":"public/img/博客园.png","hash":"8bd54005ce0fee7a5ee70e0cce5369a93ef8316c","modified":1518070441742},{"_id":"public/img/新浪微博.png","hash":"40b9099a802ee7ca40f58ab013e5faad5b3f8ed5","modified":1518070441742},{"_id":"public/img/简书.png","hash":"a1b837849522cc2956317e511b076831bb7acd8c","modified":1518070441742},{"_id":"public/img/知乎.png","hash":"2da06acf9e8026d9ac0a719844a6fae142271c14","modified":1518070441743},{"_id":"public/img/网易云音乐.png","hash":"9620f5025d6e2614d82ace771ddfe708362220c4","modified":1518070441744},{"_id":"public/img/虾米音乐.png","hash":"8e3065d8ea3a3d07b23d4cfc10ceb626c67a926a","modified":1518070441744},{"_id":"public/img/豆瓣.png","hash":"caa6021d0c35f11744f03d23a2c12f7734041562","modified":1518070441744},{"_id":"public/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1518070442709},{"_id":"public/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1518070442711},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1518070442720},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1518070442720},{"_id":"public/js/mobile.js","hash":"808b77b1a2ef204312166e0df4bed831313cd163","modified":1518070442720},{"_id":"public/js/pc.js","hash":"124ffdc2991f970242788172d3ec035f59d300fa","modified":1518070442720},{"_id":"public/js/main.js","hash":"2daabe704d1a319da195d183501930897aff064d","modified":1518070442721},{"_id":"public/css/style.css","hash":"dc831a3109871a815dde3f77abd2f6e4205ad011","modified":1518070442721}],"Category":[{"name":"术业专攻","_id":"cjde3y0x30003skozo81qrpzn"},{"name":"其它","_id":"cjde3y0xj000bskozghe7jirj"},{"name":"个人感悟","_id":"cjde3y0xn000iskozhmb9qast"}],"Data":[],"Page":[{"_content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\">","source":"404.html","raw":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\">","date":"2018-02-08T03:01:25.277Z","updated":"2018-02-08T03:01:25.277Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjde3y0vm0000skozvui2v1hg","content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>"},{"title":"about","date":"2016-05-21T09:04:08.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-05-21 17:04:08\n---\n","updated":"2018-02-08T03:01:25.282Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjde3y0y8000yskozli9lxvw9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-05-21T14:58:06.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-05-21 22:58:06\n---\n","updated":"2018-02-08T03:01:25.282Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjde3y0yc0010skozq7bo5p3m","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"javascript闭包","date":"2016-05-22T07:16:17.000Z","_content":"> 以前看过好多文档，对于闭包不是很理解，再读《你不知道的JavaScript》上卷之后，终于明白了，感谢这本书，把自己理解的内容写下，以待学习与提升\n\n<!-- more -->\n\n## 观察闭包\n\n##### 一句话说明闭包\n>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行\n\n***\n##### 这是闭包吗？\n\n`\nfunction foo () {\n  var a = 2;\n  function bar () {\n    console.log(a); // 2\n  }\n  bar();\n}\nfoo();\n`\n\n>技术上来讲，*也许是*；但根据前面的定义，*确切地说并不是*\nbar()对a的引用的方法是词法作用域的查找规则，而这些规则只是闭包的一部分。（但是非常重要的一部分！）\n\n##### 这才是闭包！！\n\n`\nfunction foo () {\n  var a = 2;\n  function bar () {\n    console.log(a); \n  }\n  return bar;\n}\nvar baz = foo();\nbaz();  // 2 \n`\n> - 函数bar() 的词法作用域能够访问foo()的内部作用域，我们将bar()函数本身当作一个值类型进行传递。\n- 在这个例子中，*我们将bar所引用的函数对象本身当作返回值*\n- baz函数对象调用了内部的函数bar(); bar()在自己定义的词法作用域*以外*的地方执行\n- foo()执行后，foo()的整个内部作用域都被销毁，而闭包的“神奇”之处正是可以阻止这件事情的发生，事实上内部作用域**依然存在**，因此没有被回收，bar()本身在使用这个内部作用域\n- bar() 依然持有对该作用域的引用，而这个引用就叫作**闭包**\n\n**当然，无论使用何种方式对函数类型的值*进行传递*，当函数在别处被调用时都可以观察到闭包**\n如：\n`\nfunction foo () {\n  var a = 2;\n  function baz () {\n    console.log(a); //2\n  }\n  bar( baz );\n}\nfunction bar(fn){\n  fn(); // 这就是闭包！\n}\n`\n> -  把内部函数baz 传递给 bar，当调用这个内部函数时，它涵盖的 foo() 内部作用域的闭包就可以观察到了，因为它能够访问 a。\n- 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\n\n###### 为了解释如何使用闭包，以上是人为地在结构上进行了修饰，但我们写过的代码中一定到处都是闭包的身影\n\n如：\n`\nfunction wait (message) {\n  setTimeout( function timer () {\n    console.log( message );\n  }, 1000 )\n}\nwait( \"Hello, closure!\" );\n`\n\n将一个内部函数timer() 传递给 setTimeout()。 timer 具有涵盖 wait() 作用域的闭包，因此还保有对变量message 的引用\nwait() 执行 1000 毫秒后，它的内部作用域并不会消失，timer 函数依然保有wait()作用域的闭包\n*这就是闭包*\n\n如jQuery:\n`\nfunction setupBot( name, selector ) {\n  $( selector ).click( function activator() {\n    console.log(\"activating:\" + name);\n  })\n}\nsetupBot('closure Bot 1', '#bot_1');\nsetupBot('closure Bot 2', '#bot_2');\n`\n**这也是闭包**\n\n本质上无论何时何地，如果将函数当作第一级的值类型并到处传递，你就会看到闭包在这些函数中的应用，只要使用了回调函数，实际上就是在使用闭包\n\n## IIFE 模式\n\n先看一段代码\n`\nvar a = 2;\n(function IIFE(){\n  console.log( a );\n})()\n`\n\n这段代码可以正常工作，但严格上来说它并不是闭包，\n**为什么！**\n因为函数并不是在它本身的词法作用域以外执行的，它在定义时所在的作用域中执行，*a 就通过普通的词法作用域查找而非闭包被发现的！！*\n\n> 尽管IIFE本身并不是观察闭包的恰当例子，但它的确创建了闭包，并且也是最常用来创建可以被封闭起来的闭馆的工具，因此IIFE的确同作用域息息相关，即使本身并不会真的创建作用域。\n\n### 循环与闭包\n\n先看下面的例子\n\n`for (var i=1; i<=5; i++) {\n  setTimeout( function timer () {\n    console.log( i );\n  }, i*1000);\n}`\n\n正常情况下，我们希望这段代码分别输出数字1~5，每秒一次，每次一个。\n但实际上，这段代码在运行时会以每秒一次的频率输出五次6.\n\n*这是为什么?*\n\n6是从哪里来的，这个循环的终止条件是i 不再<=5。条件首次成立时i的值是6。输出显示的是i的最终值。\n\n延迟函数的回调会在循环结束时才执行，根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的，但是他们都被封闭在一个共享的全局作用域中，因些实际上只有一个i，因此会每次都输出一个6出来，\n\n我们应该怎么做，才会每秒一次，每次一个数，分别是1~5呢？\n如果在循环的过程中每个迭代都需要一个闭包作用域，会成功吗？\nIIFE会通过声明并立即执行一个函数来创建作用域。那我们来试一下\n\n`for (var i=1; i<=5; i++) {\n  (function () {\n    setTimeout( function timer () {\n      console.log( i );\n    }, i*1000);\n  })();\n}`\n\n这样能行吗？**这样不行**\n为什么呢？我们现在显然拥有更多的词法作用域了，的确每个延迟函数都会将IIFE在每次迭代中创建的作用域封闭起来，*如果作用域是空的* 那么仅仅将它们进行封闭是不够的，仔细看一下，我们的IIFE只是一个什么都没有的空作用域。它需要包含一点实质内容才能为我们所用。他需要有自己的变量，用来在每个迭代中储存i的值。\n\n`for (var i=1; i<=5; i++) {\n  (function (i) {\n    setTimeout( function timer () {\n      console.log( i );\n    }, i*1000);\n  })(i);\n}`\n\n现在试试，好了吗？ **好了**，在迭代内使用IIFE会为每个迭代都生成一个新的作用域，虽然都是变量i，但每个变量i都是不一样的。每个迭代中都会含有一个具有正确值的变量供我们访问\n\n## 总结\n观察模式是可以清晰的看出来闭包的，但是在实际写代码的时候，这种观察模式是很少用在实际的项目中，用到的都是IIFE或模块这类并没有明显的闭包，但实际上用到了闭包，需要我们多多的观察与思考，才会发现某中的函数记住并访问所在的词法作用域并在当前的词法作用域之外执行。\n\n> - 本文选至*《你不知道的JavaScript》上卷*，并添加了一些个人想法。\n","source":"_posts/javascript闭包.md","raw":"---\ntitle: javascript闭包\ndate: 2016-05-22 15:16:17\ntags: [javascript,《你不知道的JavaScript》]\ncategory: 术业专攻\n---\n> 以前看过好多文档，对于闭包不是很理解，再读《你不知道的JavaScript》上卷之后，终于明白了，感谢这本书，把自己理解的内容写下，以待学习与提升\n\n<!-- more -->\n\n## 观察闭包\n\n##### 一句话说明闭包\n>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行\n\n***\n##### 这是闭包吗？\n\n`\nfunction foo () {\n  var a = 2;\n  function bar () {\n    console.log(a); // 2\n  }\n  bar();\n}\nfoo();\n`\n\n>技术上来讲，*也许是*；但根据前面的定义，*确切地说并不是*\nbar()对a的引用的方法是词法作用域的查找规则，而这些规则只是闭包的一部分。（但是非常重要的一部分！）\n\n##### 这才是闭包！！\n\n`\nfunction foo () {\n  var a = 2;\n  function bar () {\n    console.log(a); \n  }\n  return bar;\n}\nvar baz = foo();\nbaz();  // 2 \n`\n> - 函数bar() 的词法作用域能够访问foo()的内部作用域，我们将bar()函数本身当作一个值类型进行传递。\n- 在这个例子中，*我们将bar所引用的函数对象本身当作返回值*\n- baz函数对象调用了内部的函数bar(); bar()在自己定义的词法作用域*以外*的地方执行\n- foo()执行后，foo()的整个内部作用域都被销毁，而闭包的“神奇”之处正是可以阻止这件事情的发生，事实上内部作用域**依然存在**，因此没有被回收，bar()本身在使用这个内部作用域\n- bar() 依然持有对该作用域的引用，而这个引用就叫作**闭包**\n\n**当然，无论使用何种方式对函数类型的值*进行传递*，当函数在别处被调用时都可以观察到闭包**\n如：\n`\nfunction foo () {\n  var a = 2;\n  function baz () {\n    console.log(a); //2\n  }\n  bar( baz );\n}\nfunction bar(fn){\n  fn(); // 这就是闭包！\n}\n`\n> -  把内部函数baz 传递给 bar，当调用这个内部函数时，它涵盖的 foo() 内部作用域的闭包就可以观察到了，因为它能够访问 a。\n- 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\n\n###### 为了解释如何使用闭包，以上是人为地在结构上进行了修饰，但我们写过的代码中一定到处都是闭包的身影\n\n如：\n`\nfunction wait (message) {\n  setTimeout( function timer () {\n    console.log( message );\n  }, 1000 )\n}\nwait( \"Hello, closure!\" );\n`\n\n将一个内部函数timer() 传递给 setTimeout()。 timer 具有涵盖 wait() 作用域的闭包，因此还保有对变量message 的引用\nwait() 执行 1000 毫秒后，它的内部作用域并不会消失，timer 函数依然保有wait()作用域的闭包\n*这就是闭包*\n\n如jQuery:\n`\nfunction setupBot( name, selector ) {\n  $( selector ).click( function activator() {\n    console.log(\"activating:\" + name);\n  })\n}\nsetupBot('closure Bot 1', '#bot_1');\nsetupBot('closure Bot 2', '#bot_2');\n`\n**这也是闭包**\n\n本质上无论何时何地，如果将函数当作第一级的值类型并到处传递，你就会看到闭包在这些函数中的应用，只要使用了回调函数，实际上就是在使用闭包\n\n## IIFE 模式\n\n先看一段代码\n`\nvar a = 2;\n(function IIFE(){\n  console.log( a );\n})()\n`\n\n这段代码可以正常工作，但严格上来说它并不是闭包，\n**为什么！**\n因为函数并不是在它本身的词法作用域以外执行的，它在定义时所在的作用域中执行，*a 就通过普通的词法作用域查找而非闭包被发现的！！*\n\n> 尽管IIFE本身并不是观察闭包的恰当例子，但它的确创建了闭包，并且也是最常用来创建可以被封闭起来的闭馆的工具，因此IIFE的确同作用域息息相关，即使本身并不会真的创建作用域。\n\n### 循环与闭包\n\n先看下面的例子\n\n`for (var i=1; i<=5; i++) {\n  setTimeout( function timer () {\n    console.log( i );\n  }, i*1000);\n}`\n\n正常情况下，我们希望这段代码分别输出数字1~5，每秒一次，每次一个。\n但实际上，这段代码在运行时会以每秒一次的频率输出五次6.\n\n*这是为什么?*\n\n6是从哪里来的，这个循环的终止条件是i 不再<=5。条件首次成立时i的值是6。输出显示的是i的最终值。\n\n延迟函数的回调会在循环结束时才执行，根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的，但是他们都被封闭在一个共享的全局作用域中，因些实际上只有一个i，因此会每次都输出一个6出来，\n\n我们应该怎么做，才会每秒一次，每次一个数，分别是1~5呢？\n如果在循环的过程中每个迭代都需要一个闭包作用域，会成功吗？\nIIFE会通过声明并立即执行一个函数来创建作用域。那我们来试一下\n\n`for (var i=1; i<=5; i++) {\n  (function () {\n    setTimeout( function timer () {\n      console.log( i );\n    }, i*1000);\n  })();\n}`\n\n这样能行吗？**这样不行**\n为什么呢？我们现在显然拥有更多的词法作用域了，的确每个延迟函数都会将IIFE在每次迭代中创建的作用域封闭起来，*如果作用域是空的* 那么仅仅将它们进行封闭是不够的，仔细看一下，我们的IIFE只是一个什么都没有的空作用域。它需要包含一点实质内容才能为我们所用。他需要有自己的变量，用来在每个迭代中储存i的值。\n\n`for (var i=1; i<=5; i++) {\n  (function (i) {\n    setTimeout( function timer () {\n      console.log( i );\n    }, i*1000);\n  })(i);\n}`\n\n现在试试，好了吗？ **好了**，在迭代内使用IIFE会为每个迭代都生成一个新的作用域，虽然都是变量i，但每个变量i都是不一样的。每个迭代中都会含有一个具有正确值的变量供我们访问\n\n## 总结\n观察模式是可以清晰的看出来闭包的，但是在实际写代码的时候，这种观察模式是很少用在实际的项目中，用到的都是IIFE或模块这类并没有明显的闭包，但实际上用到了闭包，需要我们多多的观察与思考，才会发现某中的函数记住并访问所在的词法作用域并在当前的词法作用域之外执行。\n\n> - 本文选至*《你不知道的JavaScript》上卷*，并添加了一些个人想法。\n","slug":"javascript闭包","published":1,"updated":"2018-02-08T03:01:25.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjde3y0wt0001skoz5vtb0omm","content":"<blockquote>\n<p>以前看过好多文档，对于闭包不是很理解，再读《你不知道的JavaScript》上卷之后，终于明白了，感谢这本书，把自己理解的内容写下，以待学习与提升</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"观察闭包\"><a href=\"#观察闭包\" class=\"headerlink\" title=\"观察闭包\"></a>观察闭包</h2><h5 id=\"一句话说明闭包\"><a href=\"#一句话说明闭包\" class=\"headerlink\" title=\"一句话说明闭包\"></a>一句话说明闭包</h5><blockquote>\n<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行</p>\n</blockquote>\n<hr>\n<h5 id=\"这是闭包吗？\"><a href=\"#这是闭包吗？\" class=\"headerlink\" title=\"这是闭包吗？\"></a>这是闭包吗？</h5><p><code>function foo () {\n  var a = 2;\n  function bar () {\n    console.log(a); // 2\n  }\n  bar();\n}\nfoo();</code></p>\n<blockquote>\n<p>技术上来讲，<em>也许是</em>；但根据前面的定义，<em>确切地说并不是</em><br>bar()对a的引用的方法是词法作用域的查找规则，而这些规则只是闭包的一部分。（但是非常重要的一部分！）</p>\n</blockquote>\n<h5 id=\"这才是闭包！！\"><a href=\"#这才是闭包！！\" class=\"headerlink\" title=\"这才是闭包！！\"></a>这才是闭包！！</h5><p><code>function foo () {\n  var a = 2;\n  function bar () {\n    console.log(a); \n  }\n  return bar;\n}\nvar baz = foo();\nbaz();  // 2</code></p>\n<blockquote>\n<ul>\n<li>函数bar() 的词法作用域能够访问foo()的内部作用域，我们将bar()函数本身当作一个值类型进行传递。</li>\n<li>在这个例子中，<em>我们将bar所引用的函数对象本身当作返回值</em></li>\n<li>baz函数对象调用了内部的函数bar(); bar()在自己定义的词法作用域<em>以外</em>的地方执行</li>\n<li>foo()执行后，foo()的整个内部作用域都被销毁，而闭包的“神奇”之处正是可以阻止这件事情的发生，事实上内部作用域<strong>依然存在</strong>，因此没有被回收，bar()本身在使用这个内部作用域</li>\n<li>bar() 依然持有对该作用域的引用，而这个引用就叫作<strong>闭包</strong></li>\n</ul>\n</blockquote>\n<p><strong>当然，无论使用何种方式对函数类型的值<em>进行传递</em>，当函数在别处被调用时都可以观察到闭包</strong><br>如：<br><code>function foo () {\n  var a = 2;\n  function baz () {\n    console.log(a); //2\n  }\n  bar( baz );\n}\nfunction bar(fn){\n  fn(); // 这就是闭包！\n}</code></p>\n<blockquote>\n<ul>\n<li>把内部函数baz 传递给 bar，当调用这个内部函数时，它涵盖的 foo() 内部作用域的闭包就可以观察到了，因为它能够访问 a。</li>\n<li>无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。</li>\n</ul>\n</blockquote>\n<h6 id=\"为了解释如何使用闭包，以上是人为地在结构上进行了修饰，但我们写过的代码中一定到处都是闭包的身影\"><a href=\"#为了解释如何使用闭包，以上是人为地在结构上进行了修饰，但我们写过的代码中一定到处都是闭包的身影\" class=\"headerlink\" title=\"为了解释如何使用闭包，以上是人为地在结构上进行了修饰，但我们写过的代码中一定到处都是闭包的身影\"></a>为了解释如何使用闭包，以上是人为地在结构上进行了修饰，但我们写过的代码中一定到处都是闭包的身影</h6><p>如：<br><code>function wait (message) {\n  setTimeout( function timer () {\n    console.log( message );\n  }, 1000 )\n}\nwait( &quot;Hello, closure!&quot; );</code></p>\n<p>将一个内部函数timer() 传递给 setTimeout()。 timer 具有涵盖 wait() 作用域的闭包，因此还保有对变量message 的引用<br>wait() 执行 1000 毫秒后，它的内部作用域并不会消失，timer 函数依然保有wait()作用域的闭包<br><em>这就是闭包</em></p>\n<p>如jQuery:<br><code>function setupBot( name, selector ) {\n  $( selector ).click( function activator() {\n    console.log(&quot;activating:&quot; + name);\n  })\n}\nsetupBot(&#39;closure Bot 1&#39;, &#39;#bot_1&#39;);\nsetupBot(&#39;closure Bot 2&#39;, &#39;#bot_2&#39;);</code><br><strong>这也是闭包</strong></p>\n<p>本质上无论何时何地，如果将函数当作第一级的值类型并到处传递，你就会看到闭包在这些函数中的应用，只要使用了回调函数，实际上就是在使用闭包</p>\n<h2 id=\"IIFE-模式\"><a href=\"#IIFE-模式\" class=\"headerlink\" title=\"IIFE 模式\"></a>IIFE 模式</h2><p>先看一段代码<br><code>var a = 2;\n(function IIFE(){\n  console.log( a );\n})()</code></p>\n<p>这段代码可以正常工作，但严格上来说它并不是闭包，<br><strong>为什么！</strong><br>因为函数并不是在它本身的词法作用域以外执行的，它在定义时所在的作用域中执行，<em>a 就通过普通的词法作用域查找而非闭包被发现的！！</em></p>\n<blockquote>\n<p>尽管IIFE本身并不是观察闭包的恰当例子，但它的确创建了闭包，并且也是最常用来创建可以被封闭起来的闭馆的工具，因此IIFE的确同作用域息息相关，即使本身并不会真的创建作用域。</p>\n</blockquote>\n<h3 id=\"循环与闭包\"><a href=\"#循环与闭包\" class=\"headerlink\" title=\"循环与闭包\"></a>循环与闭包</h3><p>先看下面的例子</p>\n<p><code>for (var i=1; i&lt;=5; i++) {\n  setTimeout( function timer () {\n    console.log( i );\n  }, i*1000);\n}</code></p>\n<p>正常情况下，我们希望这段代码分别输出数字1~5，每秒一次，每次一个。<br>但实际上，这段代码在运行时会以每秒一次的频率输出五次6.</p>\n<p><em>这是为什么?</em></p>\n<p>6是从哪里来的，这个循环的终止条件是i 不再&lt;=5。条件首次成立时i的值是6。输出显示的是i的最终值。</p>\n<p>延迟函数的回调会在循环结束时才执行，根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的，但是他们都被封闭在一个共享的全局作用域中，因些实际上只有一个i，因此会每次都输出一个6出来，</p>\n<p>我们应该怎么做，才会每秒一次，每次一个数，分别是1~5呢？<br>如果在循环的过程中每个迭代都需要一个闭包作用域，会成功吗？<br>IIFE会通过声明并立即执行一个函数来创建作用域。那我们来试一下</p>\n<p><code>for (var i=1; i&lt;=5; i++) {\n  (function () {\n    setTimeout( function timer () {\n      console.log( i );\n    }, i*1000);\n  })();\n}</code></p>\n<p>这样能行吗？<strong>这样不行</strong><br>为什么呢？我们现在显然拥有更多的词法作用域了，的确每个延迟函数都会将IIFE在每次迭代中创建的作用域封闭起来，<em>如果作用域是空的</em> 那么仅仅将它们进行封闭是不够的，仔细看一下，我们的IIFE只是一个什么都没有的空作用域。它需要包含一点实质内容才能为我们所用。他需要有自己的变量，用来在每个迭代中储存i的值。</p>\n<p><code>for (var i=1; i&lt;=5; i++) {\n  (function (i) {\n    setTimeout( function timer () {\n      console.log( i );\n    }, i*1000);\n  })(i);\n}</code></p>\n<p>现在试试，好了吗？ <strong>好了</strong>，在迭代内使用IIFE会为每个迭代都生成一个新的作用域，虽然都是变量i，但每个变量i都是不一样的。每个迭代中都会含有一个具有正确值的变量供我们访问</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>观察模式是可以清晰的看出来闭包的，但是在实际写代码的时候，这种观察模式是很少用在实际的项目中，用到的都是IIFE或模块这类并没有明显的闭包，但实际上用到了闭包，需要我们多多的观察与思考，才会发现某中的函数记住并访问所在的词法作用域并在当前的词法作用域之外执行。</p>\n<blockquote>\n<ul>\n<li>本文选至<em>《你不知道的JavaScript》上卷</em>，并添加了一些个人想法。</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>以前看过好多文档，对于闭包不是很理解，再读《你不知道的JavaScript》上卷之后，终于明白了，感谢这本书，把自己理解的内容写下，以待学习与提升</p>\n</blockquote>","more":"<h2 id=\"观察闭包\"><a href=\"#观察闭包\" class=\"headerlink\" title=\"观察闭包\"></a>观察闭包</h2><h5 id=\"一句话说明闭包\"><a href=\"#一句话说明闭包\" class=\"headerlink\" title=\"一句话说明闭包\"></a>一句话说明闭包</h5><blockquote>\n<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行</p>\n</blockquote>\n<hr>\n<h5 id=\"这是闭包吗？\"><a href=\"#这是闭包吗？\" class=\"headerlink\" title=\"这是闭包吗？\"></a>这是闭包吗？</h5><p><code>function foo () {\n  var a = 2;\n  function bar () {\n    console.log(a); // 2\n  }\n  bar();\n}\nfoo();</code></p>\n<blockquote>\n<p>技术上来讲，<em>也许是</em>；但根据前面的定义，<em>确切地说并不是</em><br>bar()对a的引用的方法是词法作用域的查找规则，而这些规则只是闭包的一部分。（但是非常重要的一部分！）</p>\n</blockquote>\n<h5 id=\"这才是闭包！！\"><a href=\"#这才是闭包！！\" class=\"headerlink\" title=\"这才是闭包！！\"></a>这才是闭包！！</h5><p><code>function foo () {\n  var a = 2;\n  function bar () {\n    console.log(a); \n  }\n  return bar;\n}\nvar baz = foo();\nbaz();  // 2</code></p>\n<blockquote>\n<ul>\n<li>函数bar() 的词法作用域能够访问foo()的内部作用域，我们将bar()函数本身当作一个值类型进行传递。</li>\n<li>在这个例子中，<em>我们将bar所引用的函数对象本身当作返回值</em></li>\n<li>baz函数对象调用了内部的函数bar(); bar()在自己定义的词法作用域<em>以外</em>的地方执行</li>\n<li>foo()执行后，foo()的整个内部作用域都被销毁，而闭包的“神奇”之处正是可以阻止这件事情的发生，事实上内部作用域<strong>依然存在</strong>，因此没有被回收，bar()本身在使用这个内部作用域</li>\n<li>bar() 依然持有对该作用域的引用，而这个引用就叫作<strong>闭包</strong></li>\n</ul>\n</blockquote>\n<p><strong>当然，无论使用何种方式对函数类型的值<em>进行传递</em>，当函数在别处被调用时都可以观察到闭包</strong><br>如：<br><code>function foo () {\n  var a = 2;\n  function baz () {\n    console.log(a); //2\n  }\n  bar( baz );\n}\nfunction bar(fn){\n  fn(); // 这就是闭包！\n}</code></p>\n<blockquote>\n<ul>\n<li>把内部函数baz 传递给 bar，当调用这个内部函数时，它涵盖的 foo() 内部作用域的闭包就可以观察到了，因为它能够访问 a。</li>\n<li>无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。</li>\n</ul>\n</blockquote>\n<h6 id=\"为了解释如何使用闭包，以上是人为地在结构上进行了修饰，但我们写过的代码中一定到处都是闭包的身影\"><a href=\"#为了解释如何使用闭包，以上是人为地在结构上进行了修饰，但我们写过的代码中一定到处都是闭包的身影\" class=\"headerlink\" title=\"为了解释如何使用闭包，以上是人为地在结构上进行了修饰，但我们写过的代码中一定到处都是闭包的身影\"></a>为了解释如何使用闭包，以上是人为地在结构上进行了修饰，但我们写过的代码中一定到处都是闭包的身影</h6><p>如：<br><code>function wait (message) {\n  setTimeout( function timer () {\n    console.log( message );\n  }, 1000 )\n}\nwait( &quot;Hello, closure!&quot; );</code></p>\n<p>将一个内部函数timer() 传递给 setTimeout()。 timer 具有涵盖 wait() 作用域的闭包，因此还保有对变量message 的引用<br>wait() 执行 1000 毫秒后，它的内部作用域并不会消失，timer 函数依然保有wait()作用域的闭包<br><em>这就是闭包</em></p>\n<p>如jQuery:<br><code>function setupBot( name, selector ) {\n  $( selector ).click( function activator() {\n    console.log(&quot;activating:&quot; + name);\n  })\n}\nsetupBot(&#39;closure Bot 1&#39;, &#39;#bot_1&#39;);\nsetupBot(&#39;closure Bot 2&#39;, &#39;#bot_2&#39;);</code><br><strong>这也是闭包</strong></p>\n<p>本质上无论何时何地，如果将函数当作第一级的值类型并到处传递，你就会看到闭包在这些函数中的应用，只要使用了回调函数，实际上就是在使用闭包</p>\n<h2 id=\"IIFE-模式\"><a href=\"#IIFE-模式\" class=\"headerlink\" title=\"IIFE 模式\"></a>IIFE 模式</h2><p>先看一段代码<br><code>var a = 2;\n(function IIFE(){\n  console.log( a );\n})()</code></p>\n<p>这段代码可以正常工作，但严格上来说它并不是闭包，<br><strong>为什么！</strong><br>因为函数并不是在它本身的词法作用域以外执行的，它在定义时所在的作用域中执行，<em>a 就通过普通的词法作用域查找而非闭包被发现的！！</em></p>\n<blockquote>\n<p>尽管IIFE本身并不是观察闭包的恰当例子，但它的确创建了闭包，并且也是最常用来创建可以被封闭起来的闭馆的工具，因此IIFE的确同作用域息息相关，即使本身并不会真的创建作用域。</p>\n</blockquote>\n<h3 id=\"循环与闭包\"><a href=\"#循环与闭包\" class=\"headerlink\" title=\"循环与闭包\"></a>循环与闭包</h3><p>先看下面的例子</p>\n<p><code>for (var i=1; i&lt;=5; i++) {\n  setTimeout( function timer () {\n    console.log( i );\n  }, i*1000);\n}</code></p>\n<p>正常情况下，我们希望这段代码分别输出数字1~5，每秒一次，每次一个。<br>但实际上，这段代码在运行时会以每秒一次的频率输出五次6.</p>\n<p><em>这是为什么?</em></p>\n<p>6是从哪里来的，这个循环的终止条件是i 不再&lt;=5。条件首次成立时i的值是6。输出显示的是i的最终值。</p>\n<p>延迟函数的回调会在循环结束时才执行，根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的，但是他们都被封闭在一个共享的全局作用域中，因些实际上只有一个i，因此会每次都输出一个6出来，</p>\n<p>我们应该怎么做，才会每秒一次，每次一个数，分别是1~5呢？<br>如果在循环的过程中每个迭代都需要一个闭包作用域，会成功吗？<br>IIFE会通过声明并立即执行一个函数来创建作用域。那我们来试一下</p>\n<p><code>for (var i=1; i&lt;=5; i++) {\n  (function () {\n    setTimeout( function timer () {\n      console.log( i );\n    }, i*1000);\n  })();\n}</code></p>\n<p>这样能行吗？<strong>这样不行</strong><br>为什么呢？我们现在显然拥有更多的词法作用域了，的确每个延迟函数都会将IIFE在每次迭代中创建的作用域封闭起来，<em>如果作用域是空的</em> 那么仅仅将它们进行封闭是不够的，仔细看一下，我们的IIFE只是一个什么都没有的空作用域。它需要包含一点实质内容才能为我们所用。他需要有自己的变量，用来在每个迭代中储存i的值。</p>\n<p><code>for (var i=1; i&lt;=5; i++) {\n  (function (i) {\n    setTimeout( function timer () {\n      console.log( i );\n    }, i*1000);\n  })(i);\n}</code></p>\n<p>现在试试，好了吗？ <strong>好了</strong>，在迭代内使用IIFE会为每个迭代都生成一个新的作用域，虽然都是变量i，但每个变量i都是不一样的。每个迭代中都会含有一个具有正确值的变量供我们访问</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>观察模式是可以清晰的看出来闭包的，但是在实际写代码的时候，这种观察模式是很少用在实际的项目中，用到的都是IIFE或模块这类并没有明显的闭包，但实际上用到了闭包，需要我们多多的观察与思考，才会发现某中的函数记住并访问所在的词法作用域并在当前的词法作用域之外执行。</p>\n<blockquote>\n<ul>\n<li>本文选至<em>《你不知道的JavaScript》上卷</em>，并添加了一些个人想法。</li>\n</ul>\n</blockquote>"},{"title":"应该写点什么呢","date":"2018-02-08T05:20:07.000Z","_content":"\n不知道要说些什么","source":"_posts/123423.md","raw":"---\ntitle: 应该写点什么呢\ndate: 2018-02-08 13:20:07\ntags: [web,感悟]\n---\n\n不知道要说些什么","slug":"123423","published":1,"updated":"2018-02-08T05:23:44.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjde3y0wz0002skozhhjm9yxh","content":"<p>不知道要说些什么</p>\n","site":{"data":{}},"excerpt":"","more":"<p>不知道要说些什么</p>\n"},{"title":"js判断单击软键盘的“完成”按钮","date":"2016-05-19T11:14:18.000Z","_content":"> 最近公司有一个项目，要在页面中有一个搜索框，输入内容，单击软键盘上的搜索或完成来运行函数; 开始在想，有没有一个这样的事件去监听，去网上也找不到相关的资料！唉！！\n但皇天不负有心人，终于发现了解决的方法\n\n+ <!-- more -->\n\n###### 方法一、模拟表单提交，\n\n在input外面包上一个form标签，当用户在表单中单击搜索或完成会触发表单的submit事件，所以在submit事件中去处理搜索的逻辑，并阻止表单的提交\n\n**代码**\n\n*html*\n`<form action=\"\" id=\"form\">\n  <input type=\"text\">\n</form>`\n\n*js*\n`$('#form').submit(function(){\n  // 处理相关逻辑\n  return false;\n})`\n\n###### 方法二、用keypress事件\n\n最让我喜出望外的是，移动端的软键盘也是支持keypress、keydown、keyup事件的，这样实现起来就更加简单了，完成的event.keyCode是13，和键盘上的回车键一样，\n\n**代码**\n\n*html*\n`<input type=\"text\" id =\"txt\">`\n\n*js*\n`$(\"#txt\").keypress(function(e){\n  if(e.keyCode === 13) {\n    // 处理相关逻辑\n  }\n})`\n\n\n> - 推荐使用方法二\n- 常用的手机浏览器都是兼容的，但不敢保证所有的都是兼容，万一有个***呢\n- 感想： 团队的协作是可以很大程度上提升个人的水平与知识层面，方法二是同事告诉我的，开始我并不相信软键盘会支持这个事件，没想到还真的支持，\n- 所以不要轻易下结论，做过了，才知道，去尝试，才不后悔！！","source":"_posts/js判断单击软键盘的“完成”按钮.md","raw":"---\ntitle: js判断单击软键盘的“完成”按钮\ndate: 2016-05-19 19:14:18\ntags: javaScript\ncategory: 术业专攻\n---\n> 最近公司有一个项目，要在页面中有一个搜索框，输入内容，单击软键盘上的搜索或完成来运行函数; 开始在想，有没有一个这样的事件去监听，去网上也找不到相关的资料！唉！！\n但皇天不负有心人，终于发现了解决的方法\n\n+ <!-- more -->\n\n###### 方法一、模拟表单提交，\n\n在input外面包上一个form标签，当用户在表单中单击搜索或完成会触发表单的submit事件，所以在submit事件中去处理搜索的逻辑，并阻止表单的提交\n\n**代码**\n\n*html*\n`<form action=\"\" id=\"form\">\n  <input type=\"text\">\n</form>`\n\n*js*\n`$('#form').submit(function(){\n  // 处理相关逻辑\n  return false;\n})`\n\n###### 方法二、用keypress事件\n\n最让我喜出望外的是，移动端的软键盘也是支持keypress、keydown、keyup事件的，这样实现起来就更加简单了，完成的event.keyCode是13，和键盘上的回车键一样，\n\n**代码**\n\n*html*\n`<input type=\"text\" id =\"txt\">`\n\n*js*\n`$(\"#txt\").keypress(function(e){\n  if(e.keyCode === 13) {\n    // 处理相关逻辑\n  }\n})`\n\n\n> - 推荐使用方法二\n- 常用的手机浏览器都是兼容的，但不敢保证所有的都是兼容，万一有个***呢\n- 感想： 团队的协作是可以很大程度上提升个人的水平与知识层面，方法二是同事告诉我的，开始我并不相信软键盘会支持这个事件，没想到还真的支持，\n- 所以不要轻易下结论，做过了，才知道，去尝试，才不后悔！！","slug":"js判断单击软键盘的“完成”按钮","published":1,"updated":"2018-02-08T03:01:25.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjde3y0x60005skozl2wdo3a9","content":"<blockquote>\n<p>最近公司有一个项目，要在页面中有一个搜索框，输入内容，单击软键盘上的搜索或完成来运行函数; 开始在想，有没有一个这样的事件去监听，去网上也找不到相关的资料！唉！！<br>但皇天不负有心人，终于发现了解决的方法</p>\n</blockquote>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h6 id=\"方法一、模拟表单提交，\"><a href=\"#方法一、模拟表单提交，\" class=\"headerlink\" title=\"方法一、模拟表单提交，\"></a>方法一、模拟表单提交，</h6><p>在input外面包上一个form标签，当用户在表单中单击搜索或完成会触发表单的submit事件，所以在submit事件中去处理搜索的逻辑，并阻止表单的提交</p>\n<p><strong>代码</strong></p>\n<p><em>html</em><br><code>&lt;form action=&quot;&quot; id=&quot;form&quot;&gt;\n  &lt;input type=&quot;text&quot;&gt;\n&lt;/form&gt;</code></p>\n<p><em>js</em><br><code>$(&#39;#form&#39;).submit(function(){\n  // 处理相关逻辑\n  return false;\n})</code></p>\n<h6 id=\"方法二、用keypress事件\"><a href=\"#方法二、用keypress事件\" class=\"headerlink\" title=\"方法二、用keypress事件\"></a>方法二、用keypress事件</h6><p>最让我喜出望外的是，移动端的软键盘也是支持keypress、keydown、keyup事件的，这样实现起来就更加简单了，完成的event.keyCode是13，和键盘上的回车键一样，</p>\n<p><strong>代码</strong></p>\n<p><em>html</em><br><code>&lt;input type=&quot;text&quot; id =&quot;txt&quot;&gt;</code></p>\n<p><em>js</em><br><code>$(&quot;#txt&quot;).keypress(function(e){\n  if(e.keyCode === 13) {\n    // 处理相关逻辑\n  }\n})</code></p>\n<blockquote>\n<ul>\n<li>推荐使用方法二</li>\n<li>常用的手机浏览器都是兼容的，但不敢保证所有的都是兼容，万一有个<em>*</em>呢</li>\n<li>感想： 团队的协作是可以很大程度上提升个人的水平与知识层面，方法二是同事告诉我的，开始我并不相信软键盘会支持这个事件，没想到还真的支持，</li>\n<li>所以不要轻易下结论，做过了，才知道，去尝试，才不后悔！！</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近公司有一个项目，要在页面中有一个搜索框，输入内容，单击软键盘上的搜索或完成来运行函数; 开始在想，有没有一个这样的事件去监听，去网上也找不到相关的资料！唉！！<br>但皇天不负有心人，终于发现了解决的方法</p>\n</blockquote>\n<ul>\n<li>","more":"</li>\n</ul>\n<h6 id=\"方法一、模拟表单提交，\"><a href=\"#方法一、模拟表单提交，\" class=\"headerlink\" title=\"方法一、模拟表单提交，\"></a>方法一、模拟表单提交，</h6><p>在input外面包上一个form标签，当用户在表单中单击搜索或完成会触发表单的submit事件，所以在submit事件中去处理搜索的逻辑，并阻止表单的提交</p>\n<p><strong>代码</strong></p>\n<p><em>html</em><br><code>&lt;form action=&quot;&quot; id=&quot;form&quot;&gt;\n  &lt;input type=&quot;text&quot;&gt;\n&lt;/form&gt;</code></p>\n<p><em>js</em><br><code>$(&#39;#form&#39;).submit(function(){\n  // 处理相关逻辑\n  return false;\n})</code></p>\n<h6 id=\"方法二、用keypress事件\"><a href=\"#方法二、用keypress事件\" class=\"headerlink\" title=\"方法二、用keypress事件\"></a>方法二、用keypress事件</h6><p>最让我喜出望外的是，移动端的软键盘也是支持keypress、keydown、keyup事件的，这样实现起来就更加简单了，完成的event.keyCode是13，和键盘上的回车键一样，</p>\n<p><strong>代码</strong></p>\n<p><em>html</em><br><code>&lt;input type=&quot;text&quot; id =&quot;txt&quot;&gt;</code></p>\n<p><em>js</em><br><code>$(&quot;#txt&quot;).keypress(function(e){\n  if(e.keyCode === 13) {\n    // 处理相关逻辑\n  }\n})</code></p>\n<blockquote>\n<ul>\n<li>推荐使用方法二</li>\n<li>常用的手机浏览器都是兼容的，但不敢保证所有的都是兼容，万一有个<em>*</em>呢</li>\n<li>感想： 团队的协作是可以很大程度上提升个人的水平与知识层面，方法二是同事告诉我的，开始我并不相信软键盘会支持这个事件，没想到还真的支持，</li>\n<li>所以不要轻易下结论，做过了，才知道，去尝试，才不后悔！！</li>\n</ul>\n</blockquote>"},{"title":"markdown格式输出","date":"2016-05-18T14:59:32.000Z","_content":"markdown格式输出，可以查看不同样式渲染的实际效果，帮助作者排版与观看效果\n\n+ <!-- more -->\n\n# 标题一\n## 标题二\n### 标题三\n#### 标题四\n##### 标题五\n###### 标题六\n\n**加粗**\n\n*倾斜*\n\n`function(){\n\t// ***\n}`\n\n\n> 我是引用 引用 引用\n\n[简书个人地址](http://www.jianshu.com/users/0addbb72bba5/latest_articles)\n\n![我是图片](http://ww4.sinaimg.cn/bmiddle/aa397b7fjw1dzplsgpdw5j.jpg)\n\n- 我是无序列表\n- 我是无序列表\n- 我是无序列表\n- 我是无序列表\n\n1、我是有序列表\n2、我是有序列表\n3、我是有序列表\n4、我是有序列表\n","source":"_posts/markdown 格式输出.md","raw":"---\ntitle: markdown格式输出\ndate: 2016-05-18 22:59:32\ntags: 杂文\ncategory: 其它\n---\nmarkdown格式输出，可以查看不同样式渲染的实际效果，帮助作者排版与观看效果\n\n+ <!-- more -->\n\n# 标题一\n## 标题二\n### 标题三\n#### 标题四\n##### 标题五\n###### 标题六\n\n**加粗**\n\n*倾斜*\n\n`function(){\n\t// ***\n}`\n\n\n> 我是引用 引用 引用\n\n[简书个人地址](http://www.jianshu.com/users/0addbb72bba5/latest_articles)\n\n![我是图片](http://ww4.sinaimg.cn/bmiddle/aa397b7fjw1dzplsgpdw5j.jpg)\n\n- 我是无序列表\n- 我是无序列表\n- 我是无序列表\n- 我是无序列表\n\n1、我是有序列表\n2、我是有序列表\n3、我是有序列表\n4、我是有序列表\n","slug":"markdown 格式输出","published":1,"updated":"2018-02-08T03:01:25.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjde3y0xa0006skozo25y9i98","content":"<p>markdown格式输出，可以查看不同样式渲染的实际效果，帮助作者排版与观看效果</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h1 id=\"标题一\"><a href=\"#标题一\" class=\"headerlink\" title=\"标题一\"></a>标题一</h1><h2 id=\"标题二\"><a href=\"#标题二\" class=\"headerlink\" title=\"标题二\"></a>标题二</h2><h3 id=\"标题三\"><a href=\"#标题三\" class=\"headerlink\" title=\"标题三\"></a>标题三</h3><h4 id=\"标题四\"><a href=\"#标题四\" class=\"headerlink\" title=\"标题四\"></a>标题四</h4><h5 id=\"标题五\"><a href=\"#标题五\" class=\"headerlink\" title=\"标题五\"></a>标题五</h5><h6 id=\"标题六\"><a href=\"#标题六\" class=\"headerlink\" title=\"标题六\"></a>标题六</h6><p><strong>加粗</strong></p>\n<p><em>倾斜</em></p>\n<p><code>function(){\n    // ***\n}</code></p>\n<blockquote>\n<p>我是引用 引用 引用</p>\n</blockquote>\n<p><a href=\"http://www.jianshu.com/users/0addbb72bba5/latest_articles\" target=\"_blank\" rel=\"noopener\">简书个人地址</a></p>\n<p><img src=\"http://ww4.sinaimg.cn/bmiddle/aa397b7fjw1dzplsgpdw5j.jpg\" alt=\"我是图片\"></p>\n<ul>\n<li>我是无序列表</li>\n<li>我是无序列表</li>\n<li>我是无序列表</li>\n<li>我是无序列表</li>\n</ul>\n<p>1、我是有序列表<br>2、我是有序列表<br>3、我是有序列表<br>4、我是有序列表</p>\n","site":{"data":{}},"excerpt":"<p>markdown格式输出，可以查看不同样式渲染的实际效果，帮助作者排版与观看效果</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h1 id=\"标题一\"><a href=\"#标题一\" class=\"headerlink\" title=\"标题一\"></a>标题一</h1><h2 id=\"标题二\"><a href=\"#标题二\" class=\"headerlink\" title=\"标题二\"></a>标题二</h2><h3 id=\"标题三\"><a href=\"#标题三\" class=\"headerlink\" title=\"标题三\"></a>标题三</h3><h4 id=\"标题四\"><a href=\"#标题四\" class=\"headerlink\" title=\"标题四\"></a>标题四</h4><h5 id=\"标题五\"><a href=\"#标题五\" class=\"headerlink\" title=\"标题五\"></a>标题五</h5><h6 id=\"标题六\"><a href=\"#标题六\" class=\"headerlink\" title=\"标题六\"></a>标题六</h6><p><strong>加粗</strong></p>\n<p><em>倾斜</em></p>\n<p><code>function(){\n    // ***\n}</code></p>\n<blockquote>\n<p>我是引用 引用 引用</p>\n</blockquote>\n<p><a href=\"http://www.jianshu.com/users/0addbb72bba5/latest_articles\" target=\"_blank\" rel=\"noopener\">简书个人地址</a></p>\n<p><img src=\"http://ww4.sinaimg.cn/bmiddle/aa397b7fjw1dzplsgpdw5j.jpg\" alt=\"我是图片\"></p>\n<ul>\n<li>我是无序列表</li>\n<li>我是无序列表</li>\n<li>我是无序列表</li>\n<li>我是无序列表</li>\n</ul>\n<p>1、我是有序列表<br>2、我是有序列表<br>3、我是有序列表<br>4、我是有序列表</p>"},{"title":"只有一行文字时两端对齐","date":"2016-05-19T07:33:01.000Z","_content":"最近再做一行文字时，两端对齐，遇到了一些问题，总结一下实现方法！\n\n+ <!-- more -->\n\n## 方法1、text-align-last\n>1、 如果是中文，必须加空格，不然在有些浏览器上不会两端对齐（*如魅族手机*）\n> 2、css3新属性，但是兼容性很差！safai不支持\n\n![text-align-last支持效果](http://upload-images.jianshu.io/upload_images/2097799-ccf604a3d41cc0e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**用法：**一个块内的最后一行（*包括仅有一行文字*）\n>auto：无特殊对齐方式。\n>left：内容左对齐。\n>center：内容居中对齐。\n>right：内容右对齐。\n>justify：内容两端对齐。\n>start：内容对齐开始边界。\n>end：内容对齐结束边界。\n\n## 方法2、伪类\n> 1、 如果是中文，必须加空格，不然在有些浏览器上不会两端对齐（*如魅族手机*）\n> 2、**white-space** 不能为 *nowrap*\n\n**用法：** 在当前元素添加after伪类，给其设置display:inilne-block等（*详情见下方代码*）\n\n`html -> \n  <span>两 端 对 齐</span>\ncss ->\n span {\n    display: inline-block;\n    width: 200px;\n    text-align: justify;\n  }\n   span:after {\n    display: inline-block;\n    width: 100%;\n    height: 0;\n    content: '';\n    overflow: hidden;\n  }\n`\n\n>- 目前知道两种方法，第一种因为兼容性不好，只能放弃使用。\n- 如有大神知道其它实现方法，请在下方评论\n- 本人菜鸟，第一次写技术文章，请见谅","source":"_posts/只有一行文字时两端对齐.md","raw":"---\ntitle: 只有一行文字时两端对齐\ndate: 2016-05-19 15:33:01\ntags: css\ncategory: 术业专攻\n---\n最近再做一行文字时，两端对齐，遇到了一些问题，总结一下实现方法！\n\n+ <!-- more -->\n\n## 方法1、text-align-last\n>1、 如果是中文，必须加空格，不然在有些浏览器上不会两端对齐（*如魅族手机*）\n> 2、css3新属性，但是兼容性很差！safai不支持\n\n![text-align-last支持效果](http://upload-images.jianshu.io/upload_images/2097799-ccf604a3d41cc0e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**用法：**一个块内的最后一行（*包括仅有一行文字*）\n>auto：无特殊对齐方式。\n>left：内容左对齐。\n>center：内容居中对齐。\n>right：内容右对齐。\n>justify：内容两端对齐。\n>start：内容对齐开始边界。\n>end：内容对齐结束边界。\n\n## 方法2、伪类\n> 1、 如果是中文，必须加空格，不然在有些浏览器上不会两端对齐（*如魅族手机*）\n> 2、**white-space** 不能为 *nowrap*\n\n**用法：** 在当前元素添加after伪类，给其设置display:inilne-block等（*详情见下方代码*）\n\n`html -> \n  <span>两 端 对 齐</span>\ncss ->\n span {\n    display: inline-block;\n    width: 200px;\n    text-align: justify;\n  }\n   span:after {\n    display: inline-block;\n    width: 100%;\n    height: 0;\n    content: '';\n    overflow: hidden;\n  }\n`\n\n>- 目前知道两种方法，第一种因为兼容性不好，只能放弃使用。\n- 如有大神知道其它实现方法，请在下方评论\n- 本人菜鸟，第一次写技术文章，请见谅","slug":"只有一行文字时两端对齐","published":1,"updated":"2018-02-08T03:01:25.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjde3y0xd0007skozzrw38tfk","content":"<p>最近再做一行文字时，两端对齐，遇到了一些问题，总结一下实现方法！</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"方法1、text-align-last\"><a href=\"#方法1、text-align-last\" class=\"headerlink\" title=\"方法1、text-align-last\"></a>方法1、text-align-last</h2><blockquote>\n<p>1、 如果是中文，必须加空格，不然在有些浏览器上不会两端对齐（<em>如魅族手机</em>）<br>2、css3新属性，但是兼容性很差！safai不支持</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2097799-ccf604a3d41cc0e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"text-align-last支持效果\"></p>\n<p><strong>用法：</strong>一个块内的最后一行（<em>包括仅有一行文字</em>）</p>\n<blockquote>\n<p>auto：无特殊对齐方式。<br>left：内容左对齐。<br>center：内容居中对齐。<br>right：内容右对齐。<br>justify：内容两端对齐。<br>start：内容对齐开始边界。<br>end：内容对齐结束边界。</p>\n</blockquote>\n<h2 id=\"方法2、伪类\"><a href=\"#方法2、伪类\" class=\"headerlink\" title=\"方法2、伪类\"></a>方法2、伪类</h2><blockquote>\n<p>1、 如果是中文，必须加空格，不然在有些浏览器上不会两端对齐（<em>如魅族手机</em>）<br>2、<strong>white-space</strong> 不能为 <em>nowrap</em></p>\n</blockquote>\n<p><strong>用法：</strong> 在当前元素添加after伪类，给其设置display:inilne-block等（<em>详情见下方代码</em>）</p>\n<p><code>html -&gt; \n  &lt;span&gt;两 端 对 齐&lt;/span&gt;\ncss -&gt;\n span {\n    display: inline-block;\n    width: 200px;\n    text-align: justify;\n  }\n   span:after {\n    display: inline-block;\n    width: 100%;\n    height: 0;\n    content: &#39;&#39;;\n    overflow: hidden;\n  }</code></p>\n<blockquote>\n<ul>\n<li>目前知道两种方法，第一种因为兼容性不好，只能放弃使用。</li>\n<li>如有大神知道其它实现方法，请在下方评论</li>\n<li>本人菜鸟，第一次写技术文章，请见谅</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>最近再做一行文字时，两端对齐，遇到了一些问题，总结一下实现方法！</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<h2 id=\"方法1、text-align-last\"><a href=\"#方法1、text-align-last\" class=\"headerlink\" title=\"方法1、text-align-last\"></a>方法1、text-align-last</h2><blockquote>\n<p>1、 如果是中文，必须加空格，不然在有些浏览器上不会两端对齐（<em>如魅族手机</em>）<br>2、css3新属性，但是兼容性很差！safai不支持</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2097799-ccf604a3d41cc0e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"text-align-last支持效果\"></p>\n<p><strong>用法：</strong>一个块内的最后一行（<em>包括仅有一行文字</em>）</p>\n<blockquote>\n<p>auto：无特殊对齐方式。<br>left：内容左对齐。<br>center：内容居中对齐。<br>right：内容右对齐。<br>justify：内容两端对齐。<br>start：内容对齐开始边界。<br>end：内容对齐结束边界。</p>\n</blockquote>\n<h2 id=\"方法2、伪类\"><a href=\"#方法2、伪类\" class=\"headerlink\" title=\"方法2、伪类\"></a>方法2、伪类</h2><blockquote>\n<p>1、 如果是中文，必须加空格，不然在有些浏览器上不会两端对齐（<em>如魅族手机</em>）<br>2、<strong>white-space</strong> 不能为 <em>nowrap</em></p>\n</blockquote>\n<p><strong>用法：</strong> 在当前元素添加after伪类，给其设置display:inilne-block等（<em>详情见下方代码</em>）</p>\n<p><code>html -&gt; \n  &lt;span&gt;两 端 对 齐&lt;/span&gt;\ncss -&gt;\n span {\n    display: inline-block;\n    width: 200px;\n    text-align: justify;\n  }\n   span:after {\n    display: inline-block;\n    width: 100%;\n    height: 0;\n    content: &#39;&#39;;\n    overflow: hidden;\n  }</code></p>\n<blockquote>\n<ul>\n<li>目前知道两种方法，第一种因为兼容性不好，只能放弃使用。</li>\n<li>如有大神知道其它实现方法，请在下方评论</li>\n<li>本人菜鸟，第一次写技术文章，请见谅</li>\n</ul>\n</blockquote>"},{"title":"我在 web 领域工作越长时间","date":"2016-05-19T07:34:01.000Z","_content":"以前看过[w3cfuns](http://www.w3cfuns.com)里的一篇文档，其中有一段话很不错，摘抄如下:\n\n+ <!-- more -->\n\n>我在 web 领域工作越长时间，我就越意识到区分人才和顶尖人才的并不是他们的知识——而是他们思考问题的方式。很显然，知识在很多情况下是非常重要而且关键的——但是在一个快速发展的领域，你前进和获取知识的方式 (至少在相当长的一段时间里) 会比你已经掌握的知识显得更加重要。更重要的是：你是如何运用这些知识解决每天的问题的。","source":"_posts/我在 web 领域工作越长时间.md","raw":"---\ntitle: 我在 web 领域工作越长时间\ndate: 2016-05-19 15:34:01\ntags: [web,感悟]\ncategory: 个人感悟\n---\n以前看过[w3cfuns](http://www.w3cfuns.com)里的一篇文档，其中有一段话很不错，摘抄如下:\n\n+ <!-- more -->\n\n>我在 web 领域工作越长时间，我就越意识到区分人才和顶尖人才的并不是他们的知识——而是他们思考问题的方式。很显然，知识在很多情况下是非常重要而且关键的——但是在一个快速发展的领域，你前进和获取知识的方式 (至少在相当长的一段时间里) 会比你已经掌握的知识显得更加重要。更重要的是：你是如何运用这些知识解决每天的问题的。","slug":"我在 web 领域工作越长时间","published":1,"updated":"2018-02-08T03:01:25.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjde3y0xh000askozoit2gj8c","content":"<p>以前看过<a href=\"http://www.w3cfuns.com\" target=\"_blank\" rel=\"noopener\">w3cfuns</a>里的一篇文档，其中有一段话很不错，摘抄如下:</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<blockquote>\n<p>我在 web 领域工作越长时间，我就越意识到区分人才和顶尖人才的并不是他们的知识——而是他们思考问题的方式。很显然，知识在很多情况下是非常重要而且关键的——但是在一个快速发展的领域，你前进和获取知识的方式 (至少在相当长的一段时间里) 会比你已经掌握的知识显得更加重要。更重要的是：你是如何运用这些知识解决每天的问题的。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>以前看过<a href=\"http://www.w3cfuns.com\" target=\"_blank\" rel=\"noopener\">w3cfuns</a>里的一篇文档，其中有一段话很不错，摘抄如下:</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<blockquote>\n<p>我在 web 领域工作越长时间，我就越意识到区分人才和顶尖人才的并不是他们的知识——而是他们思考问题的方式。很显然，知识在很多情况下是非常重要而且关键的——但是在一个快速发展的领域，你前进和获取知识的方式 (至少在相当长的一段时间里) 会比你已经掌握的知识显得更加重要。更重要的是：你是如何运用这些知识解决每天的问题的。</p>\n</blockquote>"},{"title":"博客成立过程","date":"2016-05-22T05:59:32.000Z","_content":"\n一直都说要弄一个*个人博客*，但是一直拖，拖了有一年半之久，今日才弄，弄出了一个像样的博客来;\n\n+ <!-- more -->\n\n**2014年8月底**进入人生中的第二家公司，公司的技术总监是有个人博客的，也与我说过，让我也弄一个，对于自己的学习与提升都有好处；可是当时以工作忙为借口，说等这个项目上线之后再弄，这一拖就是一年之久。\n\n等到**2015年8月**才开始着手弄，在技术总监的帮助下买了一个域名和空间，并搭建好了LNMP环境，上传了一个静态页面，也就不了了之了。\n\n> 当时为什么没有接着往下弄了，原因有三。\n> 1、因为当时的技术有限，也没有什么要写的，也就没有弄下去\n> 2、没有很好的设计页面，也没有动力去仿造别人的页面\n> 3、当时还不知道有markdown这个东西，发文章要新建html或写php后台内容，而新建html太麻烦，php本人也不会，也就没有弄下去\n\n于是就一直拖，一直到**2016年5月**，17号早上刚到公司的时候，无意中翻看QQ空间*（本人一般不看QQ空间，那天也不知怎么，就打开看）*，看到前天有个朋友发一个图，是一个markdown的图片，当时还不知道，就在QQ上与他沟通，才知道有一个markdown编写文章的标记语言。一下子就喜欢了这个东西。\n\n当看它的使用方法时，才发现有好多网站都支持了这个东西，比如简书，以前也是知道简书的，但是没有去里面怎么看，当知道简书支持markdown的语法时，就有了要写东西的想法，并写了几遍文章练手。\n\n在简书中看文章，感觉里面的文章很好，种类也多，不光是技术性的，也有其它类型的文章，当无意中看到*5分钟教你使用 github pages 搭建博客*，便想去弄一个自己的博客，但是按着这个文章的内容去搭建时，出现了一个错误，无法在进行下去，又再次去简书里搜索怎么搭建个人博客，发现了hexo这个好东西（hexo已经很强大，只是知道的太晚），按着教程一步一步来，果然出现了个人博客的雏形，心里兴奋的很。\n\n在按着hexo教程搭建的时候，也出现了很多很多的坑。但也都一一解决了。\n\n> 当出现那些坑的时候，很无助，看教程也不细看，只想快点解决，快点找到方法，反而找不到。\n> 当出现这样的情况时，不可心急，要把搜到的教程一一细看，或者先放下，等心情不在急躁时，再去寻找解决方法。\n> 当心情急躁时，不会细看教程，可能把一些关键点就过去了，就算看完教程没有用，那也无妨，最起码知道这个教程无用，以后也不会再看了。不然会翻来覆去的去看已经看过的教程，增添烦躁与浪费时间。\n\n陆陆续续的几天当中，添加内容、配置config、添加评论，并在**2016年5月22日**，随着域名的绑定成功，博客终于大功搞成，以后可能会微调。但应该不会在这样大动干戈了。\n\n\n> - 感谢当时的技术总监，是他让我有搭建个人博客的想法。\n> - 感谢告诉我markdown的七哥，是他让我开始写文章并有搭建博客的冲动。\n> - 感谢hexo与其背后的技术团队，是他让我更简单的去搭建博客。\n> - 感谢Yelee，很喜欢这个主题并用运在自己的博客上。\n> - 感谢简书与在里面写教程的人，让我更好的去学习hexo与开拓眼界。\n\n\n\n在搭建hexo时，本人看的一些教程，现在贴出来，以供他人参考\n\n> - [hexo官网](https://hexo.io)\n> - [hexo指令](http://www.jianshu.com/p/9cec10b9eea2)\n> - [使用hexo与github搭建静态博客](http://www.jianshu.com/p/6e3547d63b74)\n> - [hexo+github搭建个人博客](http://www.jianshu.com/p/6745fe11bc7f)\n> - [搭建Hexo博客中碰到的坑](http://www.jianshu.com/p/a2fe56d11c4f)\n> - [Yelee主题](https://github.com/MOxFIVE/hexo-theme-yelee)","source":"_posts/博客成立过程.md","raw":"---\ntitle: 博客成立过程\ndate: 2016-05-22 13:59:32\ntags: [感悟,hexo,git]\ncategory: 个人感悟\n---\n\n一直都说要弄一个*个人博客*，但是一直拖，拖了有一年半之久，今日才弄，弄出了一个像样的博客来;\n\n+ <!-- more -->\n\n**2014年8月底**进入人生中的第二家公司，公司的技术总监是有个人博客的，也与我说过，让我也弄一个，对于自己的学习与提升都有好处；可是当时以工作忙为借口，说等这个项目上线之后再弄，这一拖就是一年之久。\n\n等到**2015年8月**才开始着手弄，在技术总监的帮助下买了一个域名和空间，并搭建好了LNMP环境，上传了一个静态页面，也就不了了之了。\n\n> 当时为什么没有接着往下弄了，原因有三。\n> 1、因为当时的技术有限，也没有什么要写的，也就没有弄下去\n> 2、没有很好的设计页面，也没有动力去仿造别人的页面\n> 3、当时还不知道有markdown这个东西，发文章要新建html或写php后台内容，而新建html太麻烦，php本人也不会，也就没有弄下去\n\n于是就一直拖，一直到**2016年5月**，17号早上刚到公司的时候，无意中翻看QQ空间*（本人一般不看QQ空间，那天也不知怎么，就打开看）*，看到前天有个朋友发一个图，是一个markdown的图片，当时还不知道，就在QQ上与他沟通，才知道有一个markdown编写文章的标记语言。一下子就喜欢了这个东西。\n\n当看它的使用方法时，才发现有好多网站都支持了这个东西，比如简书，以前也是知道简书的，但是没有去里面怎么看，当知道简书支持markdown的语法时，就有了要写东西的想法，并写了几遍文章练手。\n\n在简书中看文章，感觉里面的文章很好，种类也多，不光是技术性的，也有其它类型的文章，当无意中看到*5分钟教你使用 github pages 搭建博客*，便想去弄一个自己的博客，但是按着这个文章的内容去搭建时，出现了一个错误，无法在进行下去，又再次去简书里搜索怎么搭建个人博客，发现了hexo这个好东西（hexo已经很强大，只是知道的太晚），按着教程一步一步来，果然出现了个人博客的雏形，心里兴奋的很。\n\n在按着hexo教程搭建的时候，也出现了很多很多的坑。但也都一一解决了。\n\n> 当出现那些坑的时候，很无助，看教程也不细看，只想快点解决，快点找到方法，反而找不到。\n> 当出现这样的情况时，不可心急，要把搜到的教程一一细看，或者先放下，等心情不在急躁时，再去寻找解决方法。\n> 当心情急躁时，不会细看教程，可能把一些关键点就过去了，就算看完教程没有用，那也无妨，最起码知道这个教程无用，以后也不会再看了。不然会翻来覆去的去看已经看过的教程，增添烦躁与浪费时间。\n\n陆陆续续的几天当中，添加内容、配置config、添加评论，并在**2016年5月22日**，随着域名的绑定成功，博客终于大功搞成，以后可能会微调。但应该不会在这样大动干戈了。\n\n\n> - 感谢当时的技术总监，是他让我有搭建个人博客的想法。\n> - 感谢告诉我markdown的七哥，是他让我开始写文章并有搭建博客的冲动。\n> - 感谢hexo与其背后的技术团队，是他让我更简单的去搭建博客。\n> - 感谢Yelee，很喜欢这个主题并用运在自己的博客上。\n> - 感谢简书与在里面写教程的人，让我更好的去学习hexo与开拓眼界。\n\n\n\n在搭建hexo时，本人看的一些教程，现在贴出来，以供他人参考\n\n> - [hexo官网](https://hexo.io)\n> - [hexo指令](http://www.jianshu.com/p/9cec10b9eea2)\n> - [使用hexo与github搭建静态博客](http://www.jianshu.com/p/6e3547d63b74)\n> - [hexo+github搭建个人博客](http://www.jianshu.com/p/6745fe11bc7f)\n> - [搭建Hexo博客中碰到的坑](http://www.jianshu.com/p/a2fe56d11c4f)\n> - [Yelee主题](https://github.com/MOxFIVE/hexo-theme-yelee)","slug":"博客成立过程","published":1,"updated":"2018-02-08T03:01:25.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjde3y0y9000zskozjkpmwh45","content":"<p>一直都说要弄一个<em>个人博客</em>，但是一直拖，拖了有一年半之久，今日才弄，弄出了一个像样的博客来;</p>\n<ul>\n<li><a id=\"more\"></a>\n</li>\n</ul>\n<p><strong>2014年8月底</strong>进入人生中的第二家公司，公司的技术总监是有个人博客的，也与我说过，让我也弄一个，对于自己的学习与提升都有好处；可是当时以工作忙为借口，说等这个项目上线之后再弄，这一拖就是一年之久。</p>\n<p>等到<strong>2015年8月</strong>才开始着手弄，在技术总监的帮助下买了一个域名和空间，并搭建好了LNMP环境，上传了一个静态页面，也就不了了之了。</p>\n<blockquote>\n<p>当时为什么没有接着往下弄了，原因有三。<br>1、因为当时的技术有限，也没有什么要写的，也就没有弄下去<br>2、没有很好的设计页面，也没有动力去仿造别人的页面<br>3、当时还不知道有markdown这个东西，发文章要新建html或写php后台内容，而新建html太麻烦，php本人也不会，也就没有弄下去</p>\n</blockquote>\n<p>于是就一直拖，一直到<strong>2016年5月</strong>，17号早上刚到公司的时候，无意中翻看QQ空间<em>（本人一般不看QQ空间，那天也不知怎么，就打开看）</em>，看到前天有个朋友发一个图，是一个markdown的图片，当时还不知道，就在QQ上与他沟通，才知道有一个markdown编写文章的标记语言。一下子就喜欢了这个东西。</p>\n<p>当看它的使用方法时，才发现有好多网站都支持了这个东西，比如简书，以前也是知道简书的，但是没有去里面怎么看，当知道简书支持markdown的语法时，就有了要写东西的想法，并写了几遍文章练手。</p>\n<p>在简书中看文章，感觉里面的文章很好，种类也多，不光是技术性的，也有其它类型的文章，当无意中看到<em>5分钟教你使用 github pages 搭建博客</em>，便想去弄一个自己的博客，但是按着这个文章的内容去搭建时，出现了一个错误，无法在进行下去，又再次去简书里搜索怎么搭建个人博客，发现了hexo这个好东西（hexo已经很强大，只是知道的太晚），按着教程一步一步来，果然出现了个人博客的雏形，心里兴奋的很。</p>\n<p>在按着hexo教程搭建的时候，也出现了很多很多的坑。但也都一一解决了。</p>\n<blockquote>\n<p>当出现那些坑的时候，很无助，看教程也不细看，只想快点解决，快点找到方法，反而找不到。<br>当出现这样的情况时，不可心急，要把搜到的教程一一细看，或者先放下，等心情不在急躁时，再去寻找解决方法。<br>当心情急躁时，不会细看教程，可能把一些关键点就过去了，就算看完教程没有用，那也无妨，最起码知道这个教程无用，以后也不会再看了。不然会翻来覆去的去看已经看过的教程，增添烦躁与浪费时间。</p>\n</blockquote>\n<p>陆陆续续的几天当中，添加内容、配置config、添加评论，并在<strong>2016年5月22日</strong>，随着域名的绑定成功，博客终于大功搞成，以后可能会微调。但应该不会在这样大动干戈了。</p>\n<blockquote>\n<ul>\n<li>感谢当时的技术总监，是他让我有搭建个人博客的想法。</li>\n<li>感谢告诉我markdown的七哥，是他让我开始写文章并有搭建博客的冲动。</li>\n<li>感谢hexo与其背后的技术团队，是他让我更简单的去搭建博客。</li>\n<li>感谢Yelee，很喜欢这个主题并用运在自己的博客上。</li>\n<li>感谢简书与在里面写教程的人，让我更好的去学习hexo与开拓眼界。</li>\n</ul>\n</blockquote>\n<p>在搭建hexo时，本人看的一些教程，现在贴出来，以供他人参考</p>\n<blockquote>\n<ul>\n<li><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo官网</a></li>\n<li><a href=\"http://www.jianshu.com/p/9cec10b9eea2\" target=\"_blank\" rel=\"noopener\">hexo指令</a></li>\n<li><a href=\"http://www.jianshu.com/p/6e3547d63b74\" target=\"_blank\" rel=\"noopener\">使用hexo与github搭建静态博客</a></li>\n<li><a href=\"http://www.jianshu.com/p/6745fe11bc7f\" target=\"_blank\" rel=\"noopener\">hexo+github搭建个人博客</a></li>\n<li><a href=\"http://www.jianshu.com/p/a2fe56d11c4f\" target=\"_blank\" rel=\"noopener\">搭建Hexo博客中碰到的坑</a></li>\n<li><a href=\"https://github.com/MOxFIVE/hexo-theme-yelee\" target=\"_blank\" rel=\"noopener\">Yelee主题</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>一直都说要弄一个<em>个人博客</em>，但是一直拖，拖了有一年半之久，今日才弄，弄出了一个像样的博客来;</p>\n<ul>\n<li>","more":"</li>\n</ul>\n<p><strong>2014年8月底</strong>进入人生中的第二家公司，公司的技术总监是有个人博客的，也与我说过，让我也弄一个，对于自己的学习与提升都有好处；可是当时以工作忙为借口，说等这个项目上线之后再弄，这一拖就是一年之久。</p>\n<p>等到<strong>2015年8月</strong>才开始着手弄，在技术总监的帮助下买了一个域名和空间，并搭建好了LNMP环境，上传了一个静态页面，也就不了了之了。</p>\n<blockquote>\n<p>当时为什么没有接着往下弄了，原因有三。<br>1、因为当时的技术有限，也没有什么要写的，也就没有弄下去<br>2、没有很好的设计页面，也没有动力去仿造别人的页面<br>3、当时还不知道有markdown这个东西，发文章要新建html或写php后台内容，而新建html太麻烦，php本人也不会，也就没有弄下去</p>\n</blockquote>\n<p>于是就一直拖，一直到<strong>2016年5月</strong>，17号早上刚到公司的时候，无意中翻看QQ空间<em>（本人一般不看QQ空间，那天也不知怎么，就打开看）</em>，看到前天有个朋友发一个图，是一个markdown的图片，当时还不知道，就在QQ上与他沟通，才知道有一个markdown编写文章的标记语言。一下子就喜欢了这个东西。</p>\n<p>当看它的使用方法时，才发现有好多网站都支持了这个东西，比如简书，以前也是知道简书的，但是没有去里面怎么看，当知道简书支持markdown的语法时，就有了要写东西的想法，并写了几遍文章练手。</p>\n<p>在简书中看文章，感觉里面的文章很好，种类也多，不光是技术性的，也有其它类型的文章，当无意中看到<em>5分钟教你使用 github pages 搭建博客</em>，便想去弄一个自己的博客，但是按着这个文章的内容去搭建时，出现了一个错误，无法在进行下去，又再次去简书里搜索怎么搭建个人博客，发现了hexo这个好东西（hexo已经很强大，只是知道的太晚），按着教程一步一步来，果然出现了个人博客的雏形，心里兴奋的很。</p>\n<p>在按着hexo教程搭建的时候，也出现了很多很多的坑。但也都一一解决了。</p>\n<blockquote>\n<p>当出现那些坑的时候，很无助，看教程也不细看，只想快点解决，快点找到方法，反而找不到。<br>当出现这样的情况时，不可心急，要把搜到的教程一一细看，或者先放下，等心情不在急躁时，再去寻找解决方法。<br>当心情急躁时，不会细看教程，可能把一些关键点就过去了，就算看完教程没有用，那也无妨，最起码知道这个教程无用，以后也不会再看了。不然会翻来覆去的去看已经看过的教程，增添烦躁与浪费时间。</p>\n</blockquote>\n<p>陆陆续续的几天当中，添加内容、配置config、添加评论，并在<strong>2016年5月22日</strong>，随着域名的绑定成功，博客终于大功搞成，以后可能会微调。但应该不会在这样大动干戈了。</p>\n<blockquote>\n<ul>\n<li>感谢当时的技术总监，是他让我有搭建个人博客的想法。</li>\n<li>感谢告诉我markdown的七哥，是他让我开始写文章并有搭建博客的冲动。</li>\n<li>感谢hexo与其背后的技术团队，是他让我更简单的去搭建博客。</li>\n<li>感谢Yelee，很喜欢这个主题并用运在自己的博客上。</li>\n<li>感谢简书与在里面写教程的人，让我更好的去学习hexo与开拓眼界。</li>\n</ul>\n</blockquote>\n<p>在搭建hexo时，本人看的一些教程，现在贴出来，以供他人参考</p>\n<blockquote>\n<ul>\n<li><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo官网</a></li>\n<li><a href=\"http://www.jianshu.com/p/9cec10b9eea2\" target=\"_blank\" rel=\"noopener\">hexo指令</a></li>\n<li><a href=\"http://www.jianshu.com/p/6e3547d63b74\" target=\"_blank\" rel=\"noopener\">使用hexo与github搭建静态博客</a></li>\n<li><a href=\"http://www.jianshu.com/p/6745fe11bc7f\" target=\"_blank\" rel=\"noopener\">hexo+github搭建个人博客</a></li>\n<li><a href=\"http://www.jianshu.com/p/a2fe56d11c4f\" target=\"_blank\" rel=\"noopener\">搭建Hexo博客中碰到的坑</a></li>\n<li><a href=\"https://github.com/MOxFIVE/hexo-theme-yelee\" target=\"_blank\" rel=\"noopener\">Yelee主题</a></li>\n</ul>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjde3y0wt0001skoz5vtb0omm","category_id":"cjde3y0x30003skozo81qrpzn","_id":"cjde3y0xk000cskozvjcboixl"},{"post_id":"cjde3y0xd0007skozzrw38tfk","category_id":"cjde3y0x30003skozo81qrpzn","_id":"cjde3y0xl000eskoz067egdf1"},{"post_id":"cjde3y0x60005skozl2wdo3a9","category_id":"cjde3y0x30003skozo81qrpzn","_id":"cjde3y0xn000gskozld2oinf0"},{"post_id":"cjde3y0xa0006skozo25y9i98","category_id":"cjde3y0xj000bskozghe7jirj","_id":"cjde3y0xp000kskozph427uhw"},{"post_id":"cjde3y0xh000askozoit2gj8c","category_id":"cjde3y0xn000iskozhmb9qast","_id":"cjde3y0xq000nskozzft2eyr4"},{"post_id":"cjde3y0y9000zskozjkpmwh45","category_id":"cjde3y0xn000iskozhmb9qast","_id":"cjde3y0yg0012skozkpc7qqlt"}],"PostTag":[{"post_id":"cjde3y0wt0001skoz5vtb0omm","tag_id":"cjde3y0x50004skoz7q7lhqng","_id":"cjde3y0xm000fskoz8r0wft3v"},{"post_id":"cjde3y0wt0001skoz5vtb0omm","tag_id":"cjde3y0xf0009skozwfty7596","_id":"cjde3y0xn000hskoztjh7ftcj"},{"post_id":"cjde3y0wz0002skozhhjm9yxh","tag_id":"cjde3y0xk000dskozeukd9lho","_id":"cjde3y0xp000mskozq19de6sa"},{"post_id":"cjde3y0wz0002skozhhjm9yxh","tag_id":"cjde3y0xo000jskozipro8maw","_id":"cjde3y0xq000oskozcqezm35y"},{"post_id":"cjde3y0x60005skozl2wdo3a9","tag_id":"cjde3y0xp000lskoz01vhqexn","_id":"cjde3y0xr000qskozibpkc0rf"},{"post_id":"cjde3y0xa0006skozo25y9i98","tag_id":"cjde3y0xq000pskoz44zy0rd7","_id":"cjde3y0xs000sskozx162bk7k"},{"post_id":"cjde3y0xd0007skozzrw38tfk","tag_id":"cjde3y0xr000rskozf5xg24tq","_id":"cjde3y0xt000uskozybwoombr"},{"post_id":"cjde3y0xh000askozoit2gj8c","tag_id":"cjde3y0xk000dskozeukd9lho","_id":"cjde3y0xu000wskozvknfj01t"},{"post_id":"cjde3y0xh000askozoit2gj8c","tag_id":"cjde3y0xo000jskozipro8maw","_id":"cjde3y0xv000xskoz24cvj8y1"},{"post_id":"cjde3y0y9000zskozjkpmwh45","tag_id":"cjde3y0xo000jskozipro8maw","_id":"cjde3y0yj0014skozltidamle"},{"post_id":"cjde3y0y9000zskozjkpmwh45","tag_id":"cjde3y0yf0011skozdqgah4mo","_id":"cjde3y0yj0015skozql55mngo"},{"post_id":"cjde3y0y9000zskozjkpmwh45","tag_id":"cjde3y0yh0013skozdbmfp3sg","_id":"cjde3y0yk0016skozr43k78db"}],"Tag":[{"name":"javascript","_id":"cjde3y0x50004skoz7q7lhqng"},{"name":"《你不知道的JavaScript》","_id":"cjde3y0xf0009skozwfty7596"},{"name":"web","_id":"cjde3y0xk000dskozeukd9lho"},{"name":"感悟","_id":"cjde3y0xo000jskozipro8maw"},{"name":"javaScript","_id":"cjde3y0xp000lskoz01vhqexn"},{"name":"杂文","_id":"cjde3y0xq000pskoz44zy0rd7"},{"name":"css","_id":"cjde3y0xr000rskozf5xg24tq"},{"name":"hexo","_id":"cjde3y0yf0011skozdqgah4mo"},{"name":"git","_id":"cjde3y0yh0013skozdbmfp3sg"}]}}